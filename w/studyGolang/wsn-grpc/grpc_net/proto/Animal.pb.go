// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: Animal.proto

package Model

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Animal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
}

func (x *Animal) Reset() {
	*x = Animal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Animal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Animal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Animal) ProtoMessage() {}

func (x *Animal) ProtoReflect() protoreflect.Message {
	mi := &file_Animal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Animal.ProtoReflect.Descriptor instead.
func (*Animal) Descriptor() ([]byte, []int) {
	return file_Animal_proto_rawDescGZIP(), []int{0}
}

func (x *Animal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Animal) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

type AnimalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Animal  string `protobuf:"bytes,1,opt,name=animal,proto3" json:"animal,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *AnimalRequest) Reset() {
	*x = AnimalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Animal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimalRequest) ProtoMessage() {}

func (x *AnimalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Animal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimalRequest.ProtoReflect.Descriptor instead.
func (*AnimalRequest) Descriptor() ([]byte, []int) {
	return file_Animal_proto_rawDescGZIP(), []int{1}
}

func (x *AnimalRequest) GetAnimal() string {
	if x != nil {
		return x.Animal
	}
	return ""
}

func (x *AnimalRequest) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AnimalRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type AnimalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AnimalResponse) Reset() {
	*x = AnimalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Animal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimalResponse) ProtoMessage() {}

func (x *AnimalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Animal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimalResponse.ProtoReflect.Descriptor instead.
func (*AnimalResponse) Descriptor() ([]byte, []int) {
	return file_Animal_proto_rawDescGZIP(), []int{2}
}

func (x *AnimalResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AnimalResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_Animal_proto protoreflect.FileDescriptor

var file_Animal_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2e, 0x0a, 0x06, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x0e,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x7d, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x0d, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x1a, 0x15, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x1a, 0x15, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Animal_proto_rawDescOnce sync.Once
	file_Animal_proto_rawDescData = file_Animal_proto_rawDesc
)

func file_Animal_proto_rawDescGZIP() []byte {
	file_Animal_proto_rawDescOnce.Do(func() {
		file_Animal_proto_rawDescData = protoimpl.X.CompressGZIP(file_Animal_proto_rawDescData)
	})
	return file_Animal_proto_rawDescData
}

var file_Animal_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_Animal_proto_goTypes = []interface{}{
	(*Animal)(nil),         // 0: Model.Animal
	(*AnimalRequest)(nil),  // 1: Model.AnimalRequest
	(*AnimalResponse)(nil), // 2: Model.AnimalResponse
}
var file_Animal_proto_depIdxs = []int32{
	0, // 0: Model.AnimalService.SeaHello:input_type -> Model.Animal
	0, // 1: Model.AnimalService.GetStudent:input_type -> Model.Animal
	2, // 2: Model.AnimalService.SeaHello:output_type -> Model.AnimalResponse
	2, // 3: Model.AnimalService.GetStudent:output_type -> Model.AnimalResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Animal_proto_init() }
func file_Animal_proto_init() {
	if File_Animal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Animal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Animal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Animal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Animal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Animal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Animal_proto_goTypes,
		DependencyIndexes: file_Animal_proto_depIdxs,
		MessageInfos:      file_Animal_proto_msgTypes,
	}.Build()
	File_Animal_proto = out.File
	file_Animal_proto_rawDesc = nil
	file_Animal_proto_goTypes = nil
	file_Animal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnimalServiceClient is the client API for AnimalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnimalServiceClient interface {
	//简单模式
	SeaHello(ctx context.Context, in *Animal, opts ...grpc.CallOption) (*AnimalResponse, error)
	//双向流模式
	GetStudent(ctx context.Context, opts ...grpc.CallOption) (AnimalService_GetStudentClient, error)
}

type animalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimalServiceClient(cc grpc.ClientConnInterface) AnimalServiceClient {
	return &animalServiceClient{cc}
}

func (c *animalServiceClient) SeaHello(ctx context.Context, in *Animal, opts ...grpc.CallOption) (*AnimalResponse, error) {
	out := new(AnimalResponse)
	err := c.cc.Invoke(ctx, "/Model.AnimalService/SeaHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animalServiceClient) GetStudent(ctx context.Context, opts ...grpc.CallOption) (AnimalService_GetStudentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnimalService_serviceDesc.Streams[0], "/Model.AnimalService/GetStudent", opts...)
	if err != nil {
		return nil, err
	}
	x := &animalServiceGetStudentClient{stream}
	return x, nil
}

type AnimalService_GetStudentClient interface {
	Send(*Animal) error
	Recv() (*AnimalResponse, error)
	grpc.ClientStream
}

type animalServiceGetStudentClient struct {
	grpc.ClientStream
}

func (x *animalServiceGetStudentClient) Send(m *Animal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *animalServiceGetStudentClient) Recv() (*AnimalResponse, error) {
	m := new(AnimalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnimalServiceServer is the server API for AnimalService service.
type AnimalServiceServer interface {
	//简单模式
	SeaHello(context.Context, *Animal) (*AnimalResponse, error)
	//双向流模式
	GetStudent(AnimalService_GetStudentServer) error
}

// UnimplementedAnimalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnimalServiceServer struct {
}

func (*UnimplementedAnimalServiceServer) SeaHello(context.Context, *Animal) (*AnimalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeaHello not implemented")
}
func (*UnimplementedAnimalServiceServer) GetStudent(AnimalService_GetStudentServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}

func RegisterAnimalServiceServer(s *grpc.Server, srv AnimalServiceServer) {
	s.RegisterService(&_AnimalService_serviceDesc, srv)
}

func _AnimalService_SeaHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Animal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalServiceServer).SeaHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Model.AnimalService/SeaHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalServiceServer).SeaHello(ctx, req.(*Animal))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimalService_GetStudent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnimalServiceServer).GetStudent(&animalServiceGetStudentServer{stream})
}

type AnimalService_GetStudentServer interface {
	Send(*AnimalResponse) error
	Recv() (*Animal, error)
	grpc.ServerStream
}

type animalServiceGetStudentServer struct {
	grpc.ServerStream
}

func (x *animalServiceGetStudentServer) Send(m *AnimalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *animalServiceGetStudentServer) Recv() (*Animal, error) {
	m := new(Animal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AnimalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Model.AnimalService",
	HandlerType: (*AnimalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SeaHello",
			Handler:    _AnimalService_SeaHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStudent",
			Handler:       _AnimalService_GetStudent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Animal.proto",
}
